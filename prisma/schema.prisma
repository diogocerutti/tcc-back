// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id      BigInt      @id @default(autoincrement())
  email   String   @unique
  name    String
  password String
  phone String
  user_address_relation user_address?
  order_relation order[] // um user (usuário) possui vários pedidos (order) -> one-to-many
  credit_card_relation credit_card[]
}

model user_address {
  id     BigInt     @id @default(autoincrement())
  user_relation user @relation(fields: [id_user], references: [id])
  id_user BigInt @unique
  address String
  city String
  postal_code String
}

model admin {
  id      BigInt      @id @default(autoincrement())
  email   String   @unique
  name    String
  username    String @unique
  password String
  status Boolean
}

model product {
  id        BigInt      @id @default(autoincrement())
  name     String
  price Float
  image String?
  description String?
  status Boolean @default(true)
  id_category BigInt // um produto possui apenas uma categoria -> one-to-one
  product_category_relation product_category? @relation(fields: [id_category], references: [id])
  id_measure BigInt 
  measure_type_relation measure_type? @relation(fields: [id_measure], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order_items_relation order_items[] // um produto 'está' em várias ordem_items (ordens/pedidos) -> one-to-many
}

model product_category {
  id BigInt @id @default(autoincrement())
  category String
  product_relation product[]
}

model measure_type {
  id BigInt @id @default(autoincrement())
  measure String
  product_relation product[]
}

model order {
  id     BigInt     @id @default(autoincrement())
  id_user BigInt
  total Float
  order_items_relation order_items[] // uma ordem (pedido) possui vários order_items (itens) -> one-to-many
  user_payment_relation user_payment? // uma ordem (pedido) possui vários user_payment (pagamentos) -> one-to-many
  user_relation user @relation(fields: [id_user], references: [id])
  id_status BigInt
  order_status_relation order_status? @relation(fields: [id_status], references: [id])
  createdAt DateTime @default(now())
  date String
  hour String
}

model order_status {
  id     BigInt     @id @default(autoincrement())
  status String
  order_relation order[]
}

model order_items {
  id     BigInt     @id @default(autoincrement())
  order_relation order @relation(fields: [id_order], references: [id])
  id_order BigInt
  product_relation product @relation(fields: [id_product], references: [id])
  id_product BigInt
  quantity Int
}

model user_payment {
  id     BigInt     @id @default(autoincrement())
  payment_type_relation payment_type @relation(fields: [id_payment_type], references: [id])
  id_payment_type BigInt
  order_relation order @relation(fields: [id_order], references: [id])
  id_order BigInt @unique
  //amount Float
}

model payment_type {
  id     BigInt     @id @default(autoincrement())
  type String
  user_payment_relation user_payment[] // um tipo de pagamento (payment_type) está em vários pagamentos (user_payment) -> one-to-many
}

model credit_card {
  id BigInt @id @default(autoincrement())
  cpf String @unique
  cvv String
  expire_date DateTime @db.Date // tipo de dado específico (date)
  user_relation user @relation(fields: [id_user], references: [id])
  id_user BigInt
  name String
  number String @unique
}